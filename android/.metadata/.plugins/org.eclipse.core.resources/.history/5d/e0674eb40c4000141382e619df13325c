package com.threet.game.view;

import com.threet.game.R;
import com.threet.game.module.Board;
import com.threet.game.module.Gamer;
import com.threet.game.module.Player;
import com.threet.game.module.Robot;
import com.threet.game.module.Status;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.GridView;
import android.widget.TextView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Toast;

/**
 * The LoginActivity is the login view.
 * @author tchin
 *
 */
public class BoardActivity extends BaseActivity implements OnItemClickListener {
	
	// The GridView
	private GridView gridview;
	
	// The text view to display a player name
	private TextView playerTextView;
	
	// The adapter for grid
	private GridAdapter adapter;
	
	// The game board
	private Board board;
	
	// The first player
	private Gamer firstGamer;
	
	// The second player
	private Gamer secondGamer;
	
	// The robot player
	private Robot robot;
	
	// The player flag
	private boolean isSecondPlayer;
	
	// The flag indicates game done. 
	private boolean finished;
	
	// TODO BaseActivity
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState, R.layout.board);
	}
	
	// TODO Layout's Methods
	public void onRetry(View v) {
		retry();
	}
	
	@Override // TODO OnItemClickListener
	public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
		if (finished) return; // Do nothing if game's done
		if (robot != null && isSecondPlayer) { // It's a robot's turn.
			Toast.makeText(this, getString(R.string.robot_turn_error_message), Toast.LENGTH_SHORT).show();
			return;
		}
		
		// 1). Calculate the row and column.
		int size = board.getSlots().length;
		int row = position / size;
		int column = position % size;
		
		// 2). Take action!
		Status status = gamer.take(row, column);
		
		// 3). Refresh view.
		adapter.notifyDataSetChanged();
		
		// 4). Verify!
		verifyStatus(status);
		
		// 5). Move to the robot turn.
		turnRobot();
	}
	
	// TODO Protected Methods
	protected void initActivity() {
		// Game Board
		board = new Board();
		
		// Adapter
		adapter = new GridAdapter(board.getSlots());

		// Players
		firstGamer = new Gamer(board, "Peter");
		Intent intent = getIntent();
		int onePlayer = 1;
		int numberOfPlayers = intent.getIntExtra(PlayerActivity.NUM_PLAYER_EXTRA, onePlayer);
		if (numberOfPlayers == onePlayer) {
			robot = new Robot(board, "BubbleB");
		} else {
			secondGamer = new Gamer(board, "Stephen");
		}
		
		// UIs
		gridview = (GridView) findViewById(R.id.gridview);
		gridview.setOnItemClickListener(this);
		gridview.setAdapter(adapter);
		playerTextView = (TextView) findViewById(R.id.player_name);
		setPlayerName();
	}
	
	/**
	 * Set the player name on TextField.
	 */
	private void setPlayerName() {
		if (robot != null) {
			playerTextView.setText(isSecondPlayer ? robot.getName() : firstGamer.getName());
		} else {
			playerTextView.setText(isSecondPlayer ? secondGamer.getName() : firstGamer.getName());
		}
	}
	
	/** TODO Private Methods
	 * Verify the status
	 * @param status
	 */
	private void verifyStatus(Status status, Player player) {
		if (status == Status.OCCUPIED) {
			// Oops! this is already taken.
			Toast.makeText(this, getString(R.string.occupied_error_message), Toast.LENGTH_SHORT).show();
		} else if (status == Status.WIN) {
			// You're the winner.
			finished = true;
			String text = String.format(getString(R.string.congratulation_format_text), 
					isSecondPlayer ? robot.getName() : gamer.getName());
			Toast.makeText(this, text, Toast.LENGTH_SHORT).show();
		} else if (status == Status.DRAW) {
			finished = true;
			Toast.makeText(this, getString(R.string.draw_info_text), Toast.LENGTH_SHORT).show();
		} else { // Turn to another player.
			isSecondPlayer = !isSecondPlayer;
			playerTextView.setText(isSecondPlayer ? robot.getName() : gamer.getName());
		}
	}
	
	/**
	 * Replay again.
	 */
	private void retry() {
		finished = false;
		board.newGame();
		adapter.notifyDataSetChanged();
		
		// Is the robot's turn?
		if (isSecondPlayer) {
			turnRobot();
		}
	}
	
	/**
	 * Turn to the robot to decide its move.
	 */
	private void turnRobot() {
		if (finished) return;
		
		// 1). Take action!
		Status status = robot.take();
		
		// 2). Refresh view.
		adapter.notifyDataSetChanged();
		
		// 3). Verify!
		verifyStatus(status);
	}
}
