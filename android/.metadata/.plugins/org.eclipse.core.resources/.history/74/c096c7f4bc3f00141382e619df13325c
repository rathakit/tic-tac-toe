package com.mobile.now.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Random;

import com.threet.game.App;

import android.content.Context;
import android.content.pm.PackageManager.NameNotFoundException;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.text.TextUtils;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;

/**
 * The Util is a helper class.
 * @author tchin
 *
 */
public abstract class Util {
	
	/**
	 * Get the app version.
	 * @return the app version
	 */
	public static String getAppVersion() {
		String version = null;
		try {
	    	version = App.getContext().getPackageManager().getPackageInfo(App.getContext().getPackageName(), 0).versionName;
		} catch (NameNotFoundException e) {
		}
		return version;
	}

	/**
	 * Close the keyboard.
	 * @param editText
	 */
	public static void closeKeyboard(EditText editText) {
		InputMethodManager imm = (InputMethodManager) App.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
		imm.hideSoftInputFromWindow(editText.getWindowToken(), 0);
	}
	
	/**
	 * Open the keyboard.
	 */
	public static void openKeyboard() {
		InputMethodManager imm = (InputMethodManager) App.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
		imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, InputMethodManager.HIDE_IMPLICIT_ONLY);
	}
	
	/**
	 * Validate email address.
	 * @param target
	 * @return The result
	 */
	public static boolean isValidEmail(CharSequence target) {
		return !TextUtils.isEmpty(target) && android.util.Patterns.EMAIL_ADDRESS.matcher(target).matches();
	}
	
	/**
	 * Copy files.
	 * @param src
	 * @param dst
	 * @throws IOException
	 */
	public static void copy(File src, File dst) throws IOException {
	    InputStream in = new FileInputStream(src);
	    OutputStream out = new FileOutputStream(dst);

	    // Transfer bytes from in to out
	    byte[] buf = new byte[1024];
	    int len;
	    while ((len = in.read(buf)) > 0) {
	        out.write(buf, 0, len);
	    }
	    in.close();
	    out.close();
	}
	
	/**
	 * Check the Internet connection available
	 * @return the status
	 */
	public static boolean isNetworkConnected() {
		boolean available = false;
		Context context = App.getContext();
		ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo info = cm.getActiveNetworkInfo();
		available = info != null;
		return available;
	}
	
	/**
	 * Random string by length
	 * @return the random
	 */
	public static String randomString(int length) {
		char[] chars = "abcdefghijklmnopqrstuvwxyz".toCharArray();
		StringBuilder sb = new StringBuilder();
		Random random = new Random();
		for (int i = 0; i < length; i++) {
		    char c = chars[random.nextInt(chars.length)];
		    sb.append(c);
		}
		return sb.toString();
	}
}
